# Create a minimal image for Raspberry Pi 3

{{  $architecture := or .architecture "arm64" -}}
{{- $suite := or .suite "buster" -}}
{{- $image := or .image (printf "debian-rpi3-%s-%s.img" $suite $architecture) -}}
{{- $pack := or .pack "true" -}}
{{- $firmware_version := or .firmware_version "1.20190925" -}}

architecture: {{ $architecture }}

actions:
  - action: download
    description: Raspberry Pi GPU firmware
    url: https://github.com/raspberrypi/firmware/archive/{{ $firmware_version }}.tar.gz
    unpack: true
    name: firmware

  - action: recipe
    description: Minimal Debian {{ $suite }} system
    recipe: ../os/debian-minimal.yaml
    variables:
      architecture: {{ $architecture }}
      suite: {{ $suite }}
      pack: false

  - action: apt
    description: Install packages
    packages:
      - linux-image-arm64
      - systemd-sysv
      - u-boot-rpi
      - u-boot-menu

  - action: run
    description: Set hostname
    chroot: true
    command: echo rpi3 > /etc/hostname

  - action: overlay
    source: overlays/networkd

  - action: run
    description: Setup network
    chroot: true
    script: scripts/setup-networking.sh

  - action: overlay
    origin: firmware
    source: firmware-{{ $firmware_version }}/boot
    destination: /boot/firmware

  - action: run
    chroot: true
    command: rm -rf /boot/firmware/kernel*.img /boot/firmware/*.dtb /boot/firmware/overlays

  - action: run
    chroot: true
    command: cp /usr/lib/u-boot/rpi_3/* /boot/firmware/

  - action: overlay
    source: overlays/fw-config
    destination: /boot/firmware

  - action: overlay
    source: overlays/u-boot-menu

  - action: run
    chroot: true
    command: u-boot-update

  - action: run
    chroot: true
    command: echo console=ttyS1,115200 > /etc/kernel/cmdline

  - action: image-partition
    imagename: {{ $image }}
    imagesize: 1GB
    partitiontype: msdos
    mountpoints:
      - mountpoint: /
        partition: root
      - mountpoint: /boot/firmware
        partition: firmware
        options: [ x-systemd.automount ]
    partitions:
      - name: firmware
        fs: fat32
        start: 0%
        end: 64MB
      - name: root
        fs: ext4
        start: 64MB
        end: 100%
        flags: [ boot ]

{{- if eq $pack "true" }}
  - action: filesystem-deploy
    description: Deploying filesystem onto image

  - action: run
    description: Create block map file
    postprocess: true
    command: bmaptool create {{ $image }} > {{ $image }}.bmap

  - action: run
    description: Compressing final image
    postprocess: true
    command: gzip -f {{ $image }}
{{- end }}
